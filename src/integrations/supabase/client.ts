
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://paqlcflzhjpgvlgcfrfj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBhcWxjZmx6aGpwZ3ZsZ2NmcmZqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMzNzAxNTcsImV4cCI6MjA1ODk0NjE1N30.vY9srLDEWl7DlS9afRxiPJ7WJ-AZFWlK-C4dqt-M2T0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Tests if basic Supabase connection works
 * @returns Promise<boolean> true if connection works, false otherwise
 */
export const testBasicConnection = async (): Promise<boolean> => {
  try {
    // Try a simple query that should always work if the connection is valid
    const { data, error } = await supabase.from('profiles').select('id').limit(1);
    
    if (error) {
      console.error('Basic connection test failed with error:', error);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('Basic connection test threw an exception:', error);
    return false;
  }
};

/**
 * Checks if Supabase connection is working by making multiple attempts
 * @param maxAttempts Maximum number of connection attempts
 * @param delayMs Delay between attempts in milliseconds
 * @returns Promise<boolean> true if connection successful, false otherwise
 */
export const checkSupabaseConnection = async (
  maxAttempts: number = 3,
  delayMs: number = 1000
): Promise<boolean> => {
  let attempts = 0;
  
  while (attempts < maxAttempts) {
    try {
      const isConnected = await testBasicConnection();
      
      if (isConnected) {
        console.log(`Successfully connected to Supabase on attempt ${attempts + 1}`);
        return true;
      }
      
      console.log(`Connection attempt ${attempts + 1} failed, retrying...`);
      
      // Wait before trying again
      await new Promise(resolve => setTimeout(resolve, delayMs));
      attempts++;
    } catch (error) {
      console.error(`Error during connection attempt ${attempts + 1}:`, error);
      attempts++;
      
      // Wait before trying again
      await new Promise(resolve => setTimeout(resolve, delayMs));
    }
  }
  
  console.error(`Failed to connect to Supabase after ${maxAttempts} attempts`);
  return false;
};
