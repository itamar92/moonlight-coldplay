// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://paqlcflzhjpgvlgcfrfj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBhcWxjZmx6aGpwZ3ZsZ2NmcmZqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMzNzAxNTcsImV4cCI6MjA1ODk0NjE1N30.vY9srLDEWl7DlS9afRxiPJ7WJ-AZFWlK-C4dqt-M2T0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  },
  global: {
    headers: {
      'Content-Type': 'application/json'
    }
  }
});

// Enhanced connection check function with better debugging
export const checkSupabaseConnection = async (retries = 3, delay = 1000) => {
  for (let attempt = 0; attempt <= retries; attempt++) {
    try {
      console.log(`Connection attempt ${attempt + 1}/${retries + 1}`);
      console.log(`Using URL: ${SUPABASE_URL}`);
      
      // Test a very simple query first
      console.log('Attempting basic connection test...');
      
      // Set a timeout for the entire connection check
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // Extended timeout to 10 seconds
      
      // Try a simple health check first if available, otherwise fall back to a simple table query
      try {
        const { data: healthData, error: healthError } = await supabase
          .from('profiles')
          .select('count')
          .abortSignal(controller.signal);
          
        if (healthError) {
          console.error('Basic health check failed:', healthError);
        } else {
          console.log('Basic health check passed');
        }
      } catch (healthCheckError) {
        console.error('Health check exception:', healthCheckError);
      }
      
      console.log('Attempting profiles query...');
      
      // Now try the profiles query
      const { data, error } = await supabase
        .from('profiles')
        .select('id')
        .limit(1)
        .abortSignal(controller.signal);
        
      // Clear the timeout since the request completed
      clearTimeout(timeoutId);
      
      if (error) {
        console.error(`Error during profiles query:`, error);
        throw error;
      }
      
      // If we've reached here, the connection was successful
      console.log('Connection successful:', data);
      return true;
    } catch (e) {
      console.error(`Connection attempt ${attempt + 1} failed:`, e);
      // Include more details about the error
      if (e instanceof Error) {
        console.error('Error details:', {
          name: e.name,
          message: e.message,
          stack: e.stack
        });
      }
      
      // If we have retries left, wait before trying again
      if (attempt < retries) {
        console.log(`Retrying in ${delay}ms...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      } else {
        console.error('All connection attempts failed');
        return false;
      }
    }
  }
  return false;
};

// New function to test just the basic connection
export const testBasicConnection = async () => {
  try {
    console.log('Testing basic Supabase connection...');
    const startTime = performance.now();
    
    // Try with a simpler query that doesn't need specific tables
    const { data, error } = await supabase
      .from('profiles')
      .select('count');
    
    const endTime = performance.now();
    console.log(`Connection test took ${endTime - startTime}ms`);
    
    if (error) {
      console.error('Basic connection test failed:', error);
      return false;
    }
    
    console.log('Basic connection successful:', data);
    return true;
  } catch (e) {
    console.error('Basic connection test exception:', e);
    return false;
  }
};

// Export a modified version of the supabase client with better error handling for queries
export const safeQuery = async (queryFn: () => Promise<any>, defaultValue: any = null) => {
  try {
    const { data, error } = await queryFn();
    if (error) throw error;
    return data || defaultValue;
  } catch (error) {
    console.error('Supabase query error:', error);
    return defaultValue;
  }
};